// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	storage "github.com/KKitsun/link-shortener-svc/internal/storage"
	mock "github.com/stretchr/testify/mock"
)

// LinkQ is an autogenerated mock type for the LinkQ type
type LinkQ struct {
	mock.Mock
}

// GetURL provides a mock function with given fields: _a0
func (_m *LinkQ) GetURL(_a0 string) (*storage.Link, error) {
	ret := _m.Called(_a0)

	var r0 *storage.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*storage.Link, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *storage.Link); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveURL provides a mock function with given fields: value
func (_m *LinkQ) SaveURL(value storage.Link) (*storage.Link, error) {
	ret := _m.Called(value)

	var r0 *storage.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.Link) (*storage.Link, error)); ok {
		return rf(value)
	}
	if rf, ok := ret.Get(0).(func(storage.Link) *storage.Link); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(storage.Link) error); ok {
		r1 = rf(value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLinkQ interface {
	mock.TestingT
	Cleanup(func())
}

// NewLinkQ creates a new instance of LinkQ. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLinkQ(t mockConstructorTestingTNewLinkQ) *LinkQ {
	mock := &LinkQ{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
